<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Manager Dashboard - TechParts</title>
<style>
  /* Reset and base */
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f5f7fa;
    color: #333;
  }

  /* Container */
  .container {
    display: flex;
    height: 100vh;
  }

  /* Sidebar */
  .sidebar {
    background-color: #2e3b4e;
    width: 250px;
    display: flex;
    flex-direction: column;
    color: #fff;
    padding-top: 20px;
  }

  .sidebar .logo {
    text-align: center;
    font-size: 1.8rem;
    font-weight: 700;
    letter-spacing: 2px;
    margin-bottom: 40px;
    user-select: none;
  }

  .sidebar nav {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
  }

  .sidebar nav a {
    color: #cbd3e0;
    text-decoration: none;
    font-size: 1.1rem;
    padding: 12px 30px;
    display: flex;
    align-items: center;
    gap: 12px;
    transition: background-color 0.3s, color 0.3s;
    cursor: pointer;
  }

  .sidebar nav a:hover,
  .sidebar nav a.active {
    background-color: #4c5c7a;
    color: #fff;
    border-left: 4px solid #65a30d;
  }

  .sidebar nav a span.icon {
    font-size: 1.4rem;
  }

  /* Main content */
  .main-content {
    flex-grow: 1;
    padding: 25px 40px;
    overflow-y: auto;
  }

  /* Header */
  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }

  header h1 {
    font-size: 2rem;
    font-weight: 700;
    color: #2e3b4e;
  }

  /* Cards container */
  .cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 20px;
    margin-bottom: 35px;
  }

  /* Card style */
  .card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 6px 18px rgba(0,0,0,0.1);
    padding: 20px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .card h3 {
    font-size: 1.2rem;
    font-weight: 600;
    color: #4c5c7a;
    margin-bottom: 12px;
  }

  .card .number {
    font-size: 2.5rem;
    font-weight: 700;
    color: #65a30d;
  }

  /* Table container */
  .table-container {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 6px 18px rgba(0,0,0,0.1);
    margin-top: 20px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  table thead {
    background-color: #2e3b4e;
    color: white;
  }

  table thead th {
    padding: 12px 15px;
    text-align: left;
  }

  table tbody tr {
    border-bottom: 1px solid #ddd;
  }

  table tbody tr:hover {
    background-color: #f1f5f9;
  }

  table tbody td {
    padding: 12px 15px;
    color: #555;
  }

  /* Buttons */
  .btn {
    padding: 6px 14px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.3s ease;
  }

  .btn.edit {
    background-color: #4caf50;
    color: white;
    margin-right: 5px;
  }

  .btn.edit:hover {
    background-color: #45a049;
  }

  .btn.delete {
    background-color: #e74c3c;
    color: white;
  }

  .btn.delete:hover {
    background-color: #c0392b;
  }

  /* Form styles */
  form {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 6px 18px rgba(0,0,0,0.1);
    margin-bottom: 30px;
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
  }

  form label {
    flex: 1 0 120px;
    font-weight: 600;
    color: #4c5c7a;
    align-self: center;
  }

  form input[type="text"],
  form input[type="number"] {
    flex: 2 0 200px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
  }

  form button {
    background-color: #65a30d;
    color: white;
    border: none;
    padding: 10px 25px;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 700;
    transition: background-color 0.3s ease;
    align-self: center;
  }

  form button:hover {
    background-color: #4d7c0f;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .container {
      flex-direction: column;
    }
    .sidebar {
      width: 100%;
      height: auto;
      flex-direction: row;
      justify-content: space-around;
      padding: 10px 0;
    }
    .sidebar nav {
      flex-direction: row;
      gap: 0;
      width: 100%;
      justify-content: space-around;
    }
    .sidebar nav a {
      padding: 10px 8px;
      font-size: 0.9rem;
    }
    form {
      flex-direction: column;
      gap: 10px;
    }
    form label, form input, form button {
      flex: 1 0 100%;
    }
  }
</style>
</head>
<body>

<div class="container">
  <!-- Sidebar -->
  <aside class="sidebar">
    <div class="logo">TechParts</div>
    <nav>
      <a href="#" class="active">Dashboard</a>
      <a href="#">Inventory</a>
      <a href="#">Parts</a>
      <a href="#">Reports</a>
      <a href="#">Settings</a>
    </nav>
  </aside>

  <!-- Main content -->
  <main class="main-content">
    <header>
      <h1>Manager Dashboard</h1>
    </header>

    <!-- Cards -->
    <section class="cards">
      <div class="card">
        <h3>Total Parts</h3>
        <div class="number" id="totalParts">0</div>
      </div>
      <div class="card">
        <h3>Suppliers</h3>
        <div class="number" id="totalSuppliers">0</div>
      </div>
      <div class="card">
        <h3>Low Stock Alerts</h3>
        <div class="number" id="lowStockAlerts" style="color:#e74c3c;">0</div>
      </div>
      <div class="card">
        <h3>Categories</h3>
        <div class="number" id="totalCategories">0</div>
      </div>
    </section>

    <!-- Add/Edit Part Form -->
    <form id="partForm">
      

     <a href="Addpart.jsp" class="add-button">+ Add New Part</a>
    </form>

    <!-- Table -->
    <section class="table-container">
      <table>
        <thead>
          <tr>
            <th>Part Name</th>
            <th>Category</th>
            <th>Supplier</th>
            <th>Quantity</th>
            <th>Min Stock</th>
            <th>Price</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="partsTableBody">
          <!-- Rows will be dynamically inserted here -->
        </tbody>
      </table>
    </section>
  </main>
</div>

<script>
  // Load parts from localStorage or start with empty array
  let parts = JSON.parse(localStorage.getItem('parts')) || [];

  // Helper to generate unique IDs (simple)
  function generateId() {
    return Date.now();
  }

  // DOM elements
  const partForm = document.getElementById('partForm');
  const partIdInput = document.getElementById('partId');
  const partNameInput = document.getElementById('partName');
  const categoryInput = document.getElementById('category');
  const supplierInput = document.getElementById('supplier');
  const quantityInput = document.getElementById('quantity');
  const minStockInput = document.getElementById('minStock');
  const priceInput = document.getElementById('price');
  const submitBtn = document.getElementById('submitBtn');
  const partsTableBody = document.getElementById('partsTableBody');

  // Stats elements
  const totalPartsEl = document.getElementById('totalParts');
  const totalSuppliersEl = document.getElementById('totalSuppliers');
  const lowStockAlertsEl = document.getElementById('lowStockAlerts');
  const totalCategoriesEl = document.getElementById('totalCategories');

  // Render table rows based on parts array
  function renderTable() {
    partsTableBody.innerHTML = '';

    parts.forEach(part => {
      const tr = document.createElement('tr');

      tr.innerHTML = `
        <td>${part.partName}</td>
        <td>${part.category}</td>
        <td>${part.supplier}</td>
        <td>${part.quantity}</td>
        <td>${part.minStock}</td>
        <td>$${Number(part.price).toFixed(2)}</td>
        <td>
          <button class="btn edit" onclick="editPart(${part.id})">Edit</button>
          <button class="btn delete" onclick="deletePart(${part.id})">Delete</button>
        </td>
      `;

      partsTableBody.appendChild(tr);
    });

    updateStats();
  }

  // Update stats cards
  function updateStats() {
    totalPartsEl.textContent = parts.length;

    const suppliers = new Set(parts.map(p => p.supplier));
    totalSuppliersEl.textContent = suppliers.size;

    const lowStockCount = parts.filter(p => p.quantity <= p.minStock).length;
    lowStockAlertsEl.textContent = lowStockCount;

    const categories = new Set(parts.map(p => p.category));
    totalCategoriesEl.textContent = categories.size;
  }

  // Clear form
  function clearForm() {
    partIdInput.value = '';
    partNameInput.value = '';
    categoryInput.value = '';
    supplierInput.value = '';
    quantityInput.value = '';
    minStockInput.value = '';
    priceInput.value = '';
    submitBtn.textContent = 'Add Part';
  }

  // Add or update part on form submit
  partForm.addEventListener('submit', e => {
    e.preventDefault();

    const id = partIdInput.value;
    const partName = partNameInput.value.trim();
    const category = categoryInput.value.trim();
    const supplier = supplierInput.value.trim();
    const quantity = parseInt(quantityInput.value);
    const minStock = parseInt(minStockInput.value);
    const price = parseFloat(priceInput.value);

    if (!partName || !category || !supplier || isNaN(quantity) || isNaN(minStock) || isNaN(price)) {
      alert('Please fill in all fields correctly.');
      return;
    }

    if (id) {
      // Update existing part
      const index = parts.findIndex(p => p.id == id);
      if (index !== -1) {
        parts[index] = { id: Number(id), partName, category, supplier, quantity, minStock, price };
      }
    } else {
      // Add new part
      const newPart = {
        id: generateId(),
        partName,
        category,
        supplier,
        quantity,
        minStock,
        price
      };
      parts.push(newPart);
    }

    // Save to localStorage
    localStorage.setItem('parts', JSON.stringify(parts));

    // Refresh table and clear form
    renderTable();
    clearForm();
  });

  // Edit part - fill form with data
  function editPart(id) {
    const part = parts.find(p => p.id === id);
    if (!part) return;

    partIdInput.value = part.id;
    partNameInput.value = part.partName;
    categoryInput.value = part.category;
    supplierInput.value = part.supplier;
    quantityInput.value = part.quantity;
    minStockInput.value = part.minStock;
    priceInput.value = part.price;
    submitBtn.textContent = 'Update Part';

    // Scroll form into view (optional)
    partForm.scrollIntoView({ behavior: 'smooth' });
  }

  // Delete part
  function deletePart(id) {
    if (!confirm('Are you sure you want to delete this part?')) return;

    parts = parts.filter(p => p.id !== id);
    localStorage.setItem('parts', JSON.stringify(parts));
    renderTable();
  }

  // Initialize table on page load
  renderTable();
</script>

</body>
</html>
