package ComputerPackage;

import java.io.IOException;
import java.sql.*;
import java.util.List;
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;

@WebServlet("/PlaceOrderServlet")
public class PlaceOrderServlet extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Get user input
        String name = request.getParameter("name");
        String email = request.getParameter("email");
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");
        double total = Double.parseDouble(request.getParameter("total"));

        // Get cart from session
        HttpSession session = request.getSession();
        List<CartItem> cart = (List<CartItem>) session.getAttribute("cart");

        Connection conn = null;
        PreparedStatement psOrder = null;
        PreparedStatement psItem = null;

        try {
            // Load MySQL JDBC Driver
            Class.forName("com.mysql.jdbc.Driver");

            // Connect to database
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/computer", "root", "ishini2003");

            // Insert order into orders table
            String orderSQL = "INSERT INTO orders (name, email, phone, address, total_amount) VALUES (?, ?, ?, ?, ?)";
            psOrder = conn.prepareStatement(orderSQL, Statement.RETURN_GENERATED_KEYS);
            psOrder.setString(1, name);
            psOrder.setString(2, email);
            psOrder.setString(3, phone);
            psOrder.setString(4, address);
            psOrder.setDouble(5, total);

            int affectedRows = psOrder.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Creating order failed, no rows affected.");
            }

            // Get generated order ID
            ResultSet generatedKeys = psOrder.getGeneratedKeys();
            int orderId = 0;
            if (generatedKeys.next()) {
                orderId = generatedKeys.getInt(1);
            } else {
                throw new SQLException("Creating order failed, no ID obtained.");
            }

            // Insert order items
            if (cart != null && !cart.isEmpty()) {
                String itemSQL = "INSERT INTO order_items (order_id, product_id, product_name, price, quantity) VALUES (?, ?, ?, ?, ?)";
                psItem = conn.prepareStatement(itemSQL);

                for (CartItem item : cart) {
                    psItem.setInt(1, orderId);
                    psItem.setInt(2, item.getId());
                    psItem.setString(3, item.getName());
                    psItem.setDouble(4, item.getPrice());
                    psItem.setInt(5, item.getQuantity());

                    psItem.executeUpdate();
                }
            }

            // Clear the cart
            session.removeAttribute("cart");

            // Send confirmation email
            sendOrderEmail(email, name, orderId, total);

            // Redirect to order success page
            response.sendRedirect("OrderSuccess.jsp");

        } catch (Exception e) {
            e.printStackTrace();
            response.getWriter().println("Error placing order: " + e.getMessage());
        } finally {
            // Close resources
            try {
                if (psOrder != null) psOrder.close();
                if (psItem != null) psItem.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void sendOrderEmail(String toEmail, String customerName, int orderId, double totalAmount) {
        final String fromEmail = "your-email@gmail.com"; // Replace with your sender email
        final String password = "your-app-password";     // Replace with your email app password

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(fromEmail, password);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(fromEmail, "TechParts Store"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("Order Confirmation - TechParts");

            String content = "<h3>Dear " + customerName + ",</h3>"
                           + "<p>Thank you for your order! Your Order ID is <strong>" + orderId + "</strong>.</p>"
                           + "<p>Total Amount: Rs. <strong>" + String.format("%.2f", totalAmount) + "</strong></p>"
                           + "<p>We will process your order shortly.</p>"
                           + "<br><p>Best regards,<br>TechParts Team</p>";

            message.setContent(content, "text/html");

            Transport.send(message);
            System.out.println("Email Sent Successfully");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
