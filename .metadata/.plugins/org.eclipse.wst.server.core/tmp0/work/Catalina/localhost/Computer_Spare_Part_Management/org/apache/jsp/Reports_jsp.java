/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.106
 * Generated at: 2025-07-07 06:01:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.google.gson.Gson;
import java.util.*;

public final class Reports_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.google.gson.Gson");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Reports Dashboard - TechParts</title>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            background-color: #f3f4f6;\r\n");
      out.write("        }\r\n");
      out.write("        .sidebar {\r\n");
      out.write("            width: 220px;\r\n");
      out.write("            background-color: #111827;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 2rem 1rem;\r\n");
      out.write("        }\r\n");
      out.write("        .nav-link {\r\n");
      out.write("            color: #d1d5db;\r\n");
      out.write("            padding: 10px 15px;\r\n");
      out.write("            display: block;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            margin-bottom: 8px;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("        }\r\n");
      out.write("        .nav-link:hover,\r\n");
      out.write("        .nav-link.active {\r\n");
      out.write("            background-color: #1e40af;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        .main {\r\n");
      out.write("            flex: 1;\r\n");
      out.write("            padding: 2rem;\r\n");
      out.write("        }\r\n");
      out.write("        h1 {\r\n");
      out.write("            font-size: 2rem;\r\n");
      out.write("            margin-bottom: 1rem;\r\n");
      out.write("        }\r\n");
      out.write("        .metric-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            gap: 1.5rem;\r\n");
      out.write("            margin-bottom: 2rem;\r\n");
      out.write("        }\r\n");
      out.write("        .metric-box {\r\n");
      out.write("            flex: 1;\r\n");
      out.write("            background: white;\r\n");
      out.write("            padding: 1rem 1.5rem;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            box-shadow: 0 4px 12px rgba(0,0,0,0.06);\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        .metric-box h2 {\r\n");
      out.write("            font-size: 2rem;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            color: #2563eb;\r\n");
      out.write("        }\r\n");
      out.write("        .metric-box p {\r\n");
      out.write("            margin-top: 0.5rem;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            color: #6b7280;\r\n");
      out.write("        }\r\n");
      out.write("        canvas {\r\n");
      out.write("            margin: 2rem auto;\r\n");
      out.write("            display: block;\r\n");
      out.write("        }\r\n");
      out.write("        .export-btn {\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            padding: 10px 18px;\r\n");
      out.write("            background-color: #2563eb;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("         .logout-btn {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            background-color: #ef4444;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"sidebar\">\r\n");
      out.write("    <h2>TechParts</h2>\r\n");
      out.write("    <a href=\"ManagerDashboard.jsp\" class=\"nav-link\">Dashboard</a>\r\n");
      out.write("    <a href=\"Categories.jsp\" class=\"nav-link\">Categories</a>\r\n");
      out.write("    <a href=\"SupplierDetails.jsp\" class=\"nav-link\">Suppliers</a>\r\n");
      out.write("    <a href=\"ViewOrderDetails.jsp\" class=\"nav-link\">Orders</a>\r\n");
      out.write("    <a href=\"SalesDetails.jsp\" class=\"nav-link\">Sales</a>\r\n");
      out.write("    <a href=\"Reports.jsp\" class=\"nav-link active\">Reports</a>\r\n");
      out.write("       <a href=\"#\" class=\"nav-link\">Settings</a>\r\n");
      out.write("       <a href=\"Login.jsp\" class=\"logout-btn\" style=\"text-align: center; display: block; text-decoration: none;\">Logout</a>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"main\">\r\n");
      out.write("    <h1>Reports Dashboard</h1>\r\n");
      out.write("    <a class=\"export-btn\" href=\"ExportReportPDFServlet\">Export PDF</a>\r\n");
      out.write("\r\n");

    int totalSuppliers = 0;
    int totalParts = 0;
    int totalOrders = 0;
    double totalSales = 0.0;
    LinkedHashMap<String, Integer> partsByCategory = new LinkedHashMap<>();

    List<String> productNames = new ArrayList<>();
    List<Integer> productQuantities = new ArrayList<>();

    try {
        Class.forName("com.mysql.jdbc.Driver");
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/computer", "root", "ishini2003");
        Statement stmt = conn.createStatement();

        ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM suppliers");
        if (rs.next()) totalSuppliers = rs.getInt(1);

        rs = stmt.executeQuery("SELECT COUNT(*) FROM parts");
        if (rs.next()) totalParts = rs.getInt(1);

        rs = stmt.executeQuery("SELECT COUNT(*) FROM orders");
        if (rs.next()) totalOrders = rs.getInt(1);

        rs = stmt.executeQuery("SELECT IFNULL(SUM(total_amount), 0) FROM orders");
        if (rs.next()) totalSales = rs.getDouble(1);

        rs = stmt.executeQuery("SELECT category, COUNT(*) FROM parts GROUP BY category");
        while (rs.next()) {
            partsByCategory.put(rs.getString(1), rs.getInt(2));
        }

        // Get quantity ordered per product
        rs = stmt.executeQuery("SELECT product_name, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_name ORDER BY total_quantity DESC LIMIT 10");
        while (rs.next()) {
            productNames.add(rs.getString("product_name"));
            productQuantities.add(rs.getInt("total_quantity"));
        }

        rs.close();
        stmt.close();
        conn.close();
    } catch (Exception e) {
        out.println("<p style='color:red;'>Error: " + e.getMessage() + "</p>");
    }

    Gson gson = new Gson();

      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"metric-container\">\r\n");
      out.write("        <div class=\"metric-box\"><h2>");
      out.print( totalSuppliers );
      out.write("</h2><p>Suppliers</p></div>\r\n");
      out.write("        <div class=\"metric-box\"><h2>");
      out.print( totalParts );
      out.write("</h2><p>Parts</p></div>\r\n");
      out.write("        <div class=\"metric-box\"><h2>");
      out.print( totalOrders );
      out.write("</h2><p>Orders</p></div>\r\n");
      out.write("        <div class=\"metric-box\"><h2>$");
      out.print( String.format("%.2f", totalSales) );
      out.write("</h2><p>Total Sales</p></div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <h2>Top 10 Ordered Products</h2>\r\n");
      out.write("    <canvas id=\"productChart\" height=\"150\"></canvas>\r\n");
      out.write("\r\n");
      out.write("    <h2>Parts by Category</h2>\r\n");
      out.write("    <canvas id=\"categoryChart\" height=\"150\"></canvas>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        const productNames = ");
      out.print( gson.toJson(productNames) );
      out.write(";\r\n");
      out.write("        const productQuantities = ");
      out.print( gson.toJson(productQuantities) );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("        new Chart(document.getElementById('productChart'), {\r\n");
      out.write("            type: 'bar',\r\n");
      out.write("            data: {\r\n");
      out.write("                labels: productNames,\r\n");
      out.write("                datasets: [{\r\n");
      out.write("                    label: 'Quantity Ordered',\r\n");
      out.write("                    data: productQuantities,\r\n");
      out.write("                    backgroundColor: '#22c55e'\r\n");
      out.write("                }]\r\n");
      out.write("            },\r\n");
      out.write("            options: {\r\n");
      out.write("                responsive: true,\r\n");
      out.write("                scales: {\r\n");
      out.write("                    y: { beginAtZero: true }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        const categoryLabels = ");
      out.print( gson.toJson(new ArrayList<>(partsByCategory.keySet())) );
      out.write(";\r\n");
      out.write("        const categoryValues = ");
      out.print( gson.toJson(new ArrayList<>(partsByCategory.values())) );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("        new Chart(document.getElementById('categoryChart'), {\r\n");
      out.write("            type: 'pie',\r\n");
      out.write("            data: {\r\n");
      out.write("                labels: categoryLabels,\r\n");
      out.write("                datasets: [{\r\n");
      out.write("                    data: categoryValues,\r\n");
      out.write("                    backgroundColor: ['#2563eb','#22c55e','#ef4444','#fbbf24','#a855f7','#14b8a6']\r\n");
      out.write("                }]\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
