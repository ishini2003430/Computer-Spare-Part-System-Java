/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.106
 * Generated at: 2025-07-04 05:12:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class Viewpart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <title>Inventory Summary - TechParts</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', sans-serif;\r\n");
      out.write("            background-color: #f5f7fa;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 40px;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("        h1 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-bottom: 40px;\r\n");
      out.write("            color: #2e3b4e;\r\n");
      out.write("        }\r\n");
      out.write("        .cards {\r\n");
      out.write("            display: grid;\r\n");
      out.write("            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\r\n");
      out.write("            gap: 20px;\r\n");
      out.write("            max-width: 1000px;\r\n");
      out.write("            margin: 0 auto;\r\n");
      out.write("        }\r\n");
      out.write("        .card {\r\n");
      out.write("            background: white;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            box-shadow: 0 6px 18px rgba(0,0,0,0.1);\r\n");
      out.write("            padding: 25px 20px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        .card h3 {\r\n");
      out.write("            font-size: 1.25rem;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            color: #4c5c7a;\r\n");
      out.write("            margin-bottom: 12px;\r\n");
      out.write("        }\r\n");
      out.write("        .card .number {\r\n");
      out.write("            font-size: 3rem;\r\n");
      out.write("            font-weight: 700;\r\n");
      out.write("            color: #2563eb; /* blue */\r\n");
      out.write("        }\r\n");
      out.write("        .card small {\r\n");
      out.write("            display: block;\r\n");
      out.write("            margin-top: 8px;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("        }\r\n");
      out.write("        .low-stock {\r\n");
      out.write("            color: #e74c3c; /* red */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>Inventory Summary</h1>\r\n");
      out.write("    <section class=\"cards\">\r\n");
      out.write("    ");

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        // Variables for all categories
        int laptopCount = 0;
        int laptopAccCount = 0;
        int compAccCount = 0;
        int cctvAccCount = 0;
        int printerCount = 0;

        int laptopLowStock = 0;
        int laptopAccLowStock = 0;
        int compAccLowStock = 0;
        int cctvAccLowStock = 0;
        int printerLowStock = 0;

        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/computer", "root", "ishini2003");

            // Tables to check
            String[] tables = {"laptops", "laptop_accessories", "computer_accessories", "cctv_accessories", "printers"};
            int[] counts = new int[tables.length];
            int[] lowStocks = new int[tables.length];

            for (int i = 0; i < tables.length; i++) {
                String sqlCount = "SELECT quantity, min_stock FROM " + tables[i];
                pstmt = conn.prepareStatement(sqlCount);
                rs = pstmt.executeQuery();

                while (rs.next()) {
                    counts[i]++;
                    int quantity = rs.getInt("quantity");
                    int minStock = rs.getInt("min_stock");
                    if (quantity <= minStock) {
                        lowStocks[i]++;
                    }
                }

                rs.close();
                pstmt.close();
            }

            laptopCount = counts[0];
            laptopAccCount = counts[1];
            compAccCount = counts[2];
            cctvAccCount = counts[3];
            printerCount = counts[4];

            laptopLowStock = lowStocks[0];
            laptopAccLowStock = lowStocks[1];
            compAccLowStock = lowStocks[2];
            cctvAccLowStock = lowStocks[3];
            printerLowStock = lowStocks[4];

    
      out.write("\r\n");
      out.write("        <div class=\"card\">\r\n");
      out.write("            <h3>Laptops</h3>\r\n");
      out.write("            <div class=\"number\">");
      out.print( laptopCount );
      out.write("</div>\r\n");
      out.write("            ");
 if(laptopLowStock > 0) { 
      out.write("\r\n");
      out.write("                <small class=\"low-stock\">");
      out.print( laptopLowStock );
      out.write(" Low Stock</small>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"card\">\r\n");
      out.write("            <h3>Laptop Accessories</h3>\r\n");
      out.write("            <div class=\"number\">");
      out.print( laptopAccCount );
      out.write("</div>\r\n");
      out.write("            ");
 if(laptopAccLowStock > 0) { 
      out.write("\r\n");
      out.write("                <small class=\"low-stock\">");
      out.print( laptopAccLowStock );
      out.write(" Low Stock</small>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"card\">\r\n");
      out.write("            <h3>Computer Accessories</h3>\r\n");
      out.write("            <div class=\"number\">");
      out.print( compAccCount );
      out.write("</div>\r\n");
      out.write("            ");
 if(compAccLowStock > 0) { 
      out.write("\r\n");
      out.write("                <small class=\"low-stock\">");
      out.print( compAccLowStock );
      out.write(" Low Stock</small>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"card\">\r\n");
      out.write("            <h3>CCTV Accessories</h3>\r\n");
      out.write("            <div class=\"number\">");
      out.print( cctvAccCount );
      out.write("</div>\r\n");
      out.write("            ");
 if(cctvAccLowStock > 0) { 
      out.write("\r\n");
      out.write("                <small class=\"low-stock\">");
      out.print( cctvAccLowStock );
      out.write(" Low Stock</small>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"card\">\r\n");
      out.write("            <h3>Printers</h3>\r\n");
      out.write("            <div class=\"number\">");
      out.print( printerCount );
      out.write("</div>\r\n");
      out.write("            ");
 if(printerLowStock > 0) { 
      out.write("\r\n");
      out.write("                <small class=\"low-stock\">");
      out.print( printerLowStock );
      out.write(" Low Stock</small>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    ");

        } catch(Exception e) {
            out.println("<p style='color:red;'>Error loading inventory summary: " + e.getMessage() + "</p>");
        } finally {
            if(rs != null) try { rs.close(); } catch(Exception ignore){}
            if(pstmt != null) try { pstmt.close(); } catch(Exception ignore){}
            if(conn != null) try { conn.close(); } catch(Exception ignore){}
        }
    
      out.write("\r\n");
      out.write("    </section>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
