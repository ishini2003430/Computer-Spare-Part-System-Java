/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.106
 * Generated at: 2025-07-07 08:28:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.google.gson.Gson;
import java.util.*;

public final class ManagerDashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.google.gson.Gson");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <title>Manager Dashboard - TechParts</title>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Segoe UI', sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            background-color: #f9fafb;\r\n");
      out.write("            color: #374151;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("        /* Sidebar */\r\n");
      out.write("        .sidebar {\r\n");
      out.write("            width: 220px;\r\n");
      out.write("            background-color: #111827;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 2rem 1rem;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("        }\r\n");
      out.write("        .sidebar h2 {\r\n");
      out.write("            font-size: 1.75rem;\r\n");
      out.write("            font-weight: 700;\r\n");
      out.write("            margin-bottom: 2rem;\r\n");
      out.write("            letter-spacing: 1.5px;\r\n");
      out.write("            user-select: none;\r\n");
      out.write("        }\r\n");
      out.write("        .nav-link {\r\n");
      out.write("            color: #d1d5db;\r\n");
      out.write("            padding: 12px 16px;\r\n");
      out.write("            margin-bottom: 0.8rem;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("            transition: background-color 0.3s, color 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("        .nav-link:hover {\r\n");
      out.write("            background-color: #1e40af;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        .nav-link.active {\r\n");
      out.write("            background-color: #2563eb;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        .logout-btn {\r\n");
      out.write("            margin-top: auto;\r\n");
      out.write("            padding: 12px 16px;\r\n");
      out.write("            background-color: #ef4444;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-weight: 700;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            user-select: none;\r\n");
      out.write("            transition: background-color 0.3s;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("        }\r\n");
      out.write("        .logout-btn:hover {\r\n");
      out.write("            background-color: #b91c1c;\r\n");
      out.write("        }\r\n");
      out.write("        /* Main content */\r\n");
      out.write("        .main {\r\n");
      out.write("            flex-grow: 1;\r\n");
      out.write("            padding: 2.5rem 3rem;\r\n");
      out.write("            overflow-y: auto;\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("        }\r\n");
      out.write("        .header {\r\n");
      out.write("            font-size: 2rem;\r\n");
      out.write("            font-weight: 700;\r\n");
      out.write("            margin-bottom: 2rem;\r\n");
      out.write("            color: #1f2937;\r\n");
      out.write("            letter-spacing: 1px;\r\n");
      out.write("            user-select: none;\r\n");
      out.write("        }\r\n");
      out.write("        /* Cards container */\r\n");
      out.write("        .cards {\r\n");
      out.write("            display: grid;\r\n");
      out.write("            grid-template-columns: repeat(auto-fit,minmax(220px,1fr));\r\n");
      out.write("            gap: 1rem;\r\n");
      out.write("            margin-bottom: 2.5rem;\r\n");
      out.write("        }\r\n");
      out.write("        /* Card style */\r\n");
      out.write("        .card {\r\n");
      out.write("            background: #2563eb;\r\n");
      out.write("            color: white;\r\n");
      out.write("            padding: 1.5rem 2rem;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            box-shadow: 0 8px 16px rgb(37 99 235 / 0.3);\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            transition: background-color 0.3s;\r\n");
      out.write("            user-select: none;\r\n");
      out.write("        }\r\n");
      out.write("        .card:hover {\r\n");
      out.write("            background-color: #1e40af;\r\n");
      out.write("            box-shadow: 0 12px 20px rgb(30 64 175 / 0.5);\r\n");
      out.write("        }\r\n");
      out.write("        .card h3 {\r\n");
      out.write("            font-weight: 700;\r\n");
      out.write("            font-size: 1.25rem;\r\n");
      out.write("            margin: 0 0 0.3rem;\r\n");
      out.write("            letter-spacing: 0.8px;\r\n");
      out.write("        }\r\n");
      out.write("        .card p {\r\n");
      out.write("            font-size: 2rem;\r\n");
      out.write("            font-weight: 900;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            line-height: 1;\r\n");
      out.write("            letter-spacing: 1.5px;\r\n");
      out.write("        }\r\n");
      out.write("        /* Charts container */\r\n");
      out.write("        .charts {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            width: 750px;\r\n");
      out.write("            gap: 2rem;\r\n");
      out.write("            flex-wrap: wrap;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("        }\r\n");
      out.write("        .chart-card {\r\n");
      out.write("            background: white;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            box-shadow: 0 4px 12px rgb(0 0 0 / 0.05);\r\n");
      out.write("            padding: 1.5rem 2rem;\r\n");
      out.write("            flex: 1 1 300px;\r\n");
      out.write("            user-select: none;\r\n");
      out.write("        }\r\n");
      out.write("        .chart-card h3 {\r\n");
      out.write("            margin-top: 0;\r\n");
      out.write("            font-weight: 700;\r\n");
      out.write("            color: #1f2937;\r\n");
      out.write("            margin-bottom: 1rem;\r\n");
      out.write("        }\r\n");
      out.write("        /* Responsive */\r\n");
      out.write("        @media (max-width: 720px) {\r\n");
      out.write("            body {\r\n");
      out.write("                flex-direction: column;\r\n");
      out.write("                height: auto;\r\n");
      out.write("            }\r\n");
      out.write("            .sidebar {\r\n");
      out.write("                width: 100%;\r\n");
      out.write("                flex-direction: row;\r\n");
      out.write("                padding: 1rem;\r\n");
      out.write("                overflow-x: auto;\r\n");
      out.write("            }\r\n");
      out.write("            .sidebar h2 {\r\n");
      out.write("                flex: 1 0 auto;\r\n");
      out.write("                margin-bottom: 0;\r\n");
      out.write("            }\r\n");
      out.write("            .nav-link {\r\n");
      out.write("                margin: 0 0.7rem 0 0;\r\n");
      out.write("                padding: 8px 12px;\r\n");
      out.write("            }\r\n");
      out.write("            .logout-btn {\r\n");
      out.write("                margin: 0 0 0 auto;\r\n");
      out.write("                padding: 8px 12px;\r\n");
      out.write("            }\r\n");
      out.write("            .main {\r\n");
      out.write("                padding: 2rem 1.5rem;\r\n");
      out.write("            }\r\n");
      out.write("            .charts {\r\n");
      out.write("                flex-direction: column;\r\n");
      out.write("            }\r\n");
      out.write("            .chart-card {\r\n");
      out.write("                flex-basis: 100%;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"sidebar\">\r\n");
      out.write("        <h2>TechParts</h2>\r\n");
      out.write("        <a href=\"ManagerDashboard.jsp\" class=\"nav-link active\">Dashboard</a>\r\n");
      out.write("        <a href=\"Categories.jsp\" class=\"nav-link\">Categories</a>\r\n");
      out.write("        <a href=\"SupplierDetails.jsp\" class=\"nav-link\">Suppliers</a>\r\n");
      out.write("        <a href=\"ViewOrderDetails.jsp\" class=\"nav-link\">Orders</a>\r\n");
      out.write("        <a href=\"SalesDetails.jsp\" class=\"nav-link\">Sales</a>\r\n");
      out.write("        <a href=\"Reports.jsp\" class=\"nav-link\">Reports</a>\r\n");
      out.write("        <a href=\"Setting.jsp\" class=\"nav-link\">Settings</a>\r\n");
      out.write("        <a href=\"Login.jsp\" class=\"logout-btn\">Logout</a>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"main\">\r\n");
      out.write("        <div class=\"header\">Manager Dashboard</div>\r\n");
      out.write("\r\n");

    int totalUsers = 0;
    int totalOrders = 0;
    double totalRevenue = 0.0;
    int totalProducts = 0;

    LinkedHashMap<String, Integer> partsByCategory = new LinkedHashMap<>();
    List<String> productNames = new ArrayList<>();
    List<Integer> productQuantities = new ArrayList<>();

    try {
        Class.forName("com.mysql.jdbc.Driver");
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/computer", "root", "ishini2003");
        Statement stmt = conn.createStatement();

        // Total users from register table
        ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM register");
        if (rs.next()) totalUsers = rs.getInt(1);
        rs.close();

        // Total orders
        rs = stmt.executeQuery("SELECT COUNT(*) FROM orders");
        if (rs.next()) totalOrders = rs.getInt(1);
        rs.close();

        // Total revenue
        rs = stmt.executeQuery("SELECT IFNULL(SUM(total_amount), 0) FROM orders");
        if (rs.next()) totalRevenue = rs.getDouble(1);
        rs.close();

        // Total products combined count from multiple tables
        rs = stmt.executeQuery(
            "SELECT " +
            " (SELECT COUNT(*) FROM cctvaccess) + " +
            " (SELECT COUNT(*) FROM computeraccess) + " +
            " (SELECT COUNT(*) FROM laptops) + " +
            " (SELECT COUNT(*) FROM printers) + " +
            " (SELECT COUNT(*) FROM products) AS total_products"
        );
        if (rs.next()) totalProducts = rs.getInt("total_products");
        rs.close();

        // Parts by category for pie chart
        // Laptops
        rs = stmt.executeQuery("SELECT COUNT(*) FROM laptops");
        if (rs.next()) partsByCategory.put("Laptops", rs.getInt(1));
        rs.close();

        // Laptop Accessories (assuming computeraccess table has category column)
        rs = stmt.executeQuery("SELECT COUNT(*) FROM computeraccess WHERE category = 'Laptop Accessories'");
        if (rs.next()) partsByCategory.put("Laptop Accessories", rs.getInt(1));
        rs.close();

        // Computer Accessories
        rs = stmt.executeQuery("SELECT COUNT(*) FROM computeraccess WHERE category = 'Computer Accessories'");
        if (rs.next()) partsByCategory.put("Computer Accessories", rs.getInt(1));
        rs.close();

        // CCTV Accessories
        rs = stmt.executeQuery("SELECT COUNT(*) FROM cctvaccess");
        if (rs.next()) partsByCategory.put("CCTV Accessories", rs.getInt(1));
        rs.close();

        // Printers
        rs = stmt.executeQuery("SELECT COUNT(*) FROM printers");
        if (rs.next()) partsByCategory.put("Printers", rs.getInt(1));
        rs.close();

        // Top 10 ordered products for bar chart
        rs = stmt.executeQuery("SELECT product_name, SUM(quantity) AS total_quantity FROM order_items GROUP BY product_name ORDER BY total_quantity DESC LIMIT 10");
        while (rs.next()) {
            productNames.add(rs.getString("product_name"));
            productQuantities.add(rs.getInt("total_quantity"));
        }
        rs.close();

        stmt.close();
        conn.close();
    } catch (Exception e) {
        out.println("<p style='color:red;'>Error: " + e.getMessage() + "</p>");
    }

    Gson gson = new Gson();

      out.write("\r\n");
      out.write("\r\n");
      out.write("        <!-- Dashboard Cards -->\r\n");
      out.write("        <div class=\"cards\">\r\n");
      out.write("            <div class=\"card\">\r\n");
      out.write("                <h3>Total Users</h3>\r\n");
      out.write("                <p>");
      out.print( totalUsers );
      out.write("</p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"card\">\r\n");
      out.write("                <h3>Total Orders</h3>\r\n");
      out.write("                <p>");
      out.print( totalOrders );
      out.write("</p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"card\">\r\n");
      out.write("                <h3>Total Revenue</h3>\r\n");
      out.write("                <p>$");
      out.print( String.format("%.2f", totalRevenue) );
      out.write("</p>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"card\">\r\n");
      out.write("                <h3>Total Products</h3>\r\n");
      out.write("                <p>");
      out.print( totalProducts );
      out.write("</p>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Charts -->\r\n");
      out.write("        <div class=\"charts\">\r\n");
      out.write("            <div class=\"chart-card\">\r\n");
      out.write("                <h3>Top 10 Ordered Products</h3>\r\n");
      out.write("                <canvas id=\"productChart\" height=\"100\"></canvas>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"chart-card\">\r\n");
      out.write("                <h3>Parts by Category</h3>\r\n");
      out.write("                <canvas id=\"categoryChart\" height=\"50\"></canvas>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    const productNames = ");
      out.print( gson.toJson(productNames) );
      out.write(";\r\n");
      out.write("    const productQuantities = ");
      out.print( gson.toJson(productQuantities) );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("    new Chart(document.getElementById('productChart'), {\r\n");
      out.write("        type: 'bar',\r\n");
      out.write("        data: {\r\n");
      out.write("            labels: productNames,\r\n");
      out.write("            datasets: [{\r\n");
      out.write("                label: 'Quantity Ordered',\r\n");
      out.write("                data: productQuantities,\r\n");
      out.write("                backgroundColor: '#22c55e'\r\n");
      out.write("            }]\r\n");
      out.write("        },\r\n");
      out.write("        options: {\r\n");
      out.write("            responsive: true,\r\n");
      out.write("            scales: { y: { beginAtZero: true } }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    const categoryLabels = ");
      out.print( gson.toJson(new ArrayList<>(partsByCategory.keySet())) );
      out.write(";\r\n");
      out.write("    const categoryValues = ");
      out.print( gson.toJson(new ArrayList<>(partsByCategory.values())) );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("    new Chart(document.getElementById('categoryChart'), {\r\n");
      out.write("        type: 'pie',\r\n");
      out.write("        data: {\r\n");
      out.write("            labels: categoryLabels,\r\n");
      out.write("            datasets: [{\r\n");
      out.write("                data: categoryValues,\r\n");
      out.write("                backgroundColor: ['#2563eb','#22c55e','#ef4444','#fbbf24','#a855f7','#14b8a6']\r\n");
      out.write("            }]\r\n");
      out.write("        },\r\n");
      out.write("        options: {\r\n");
      out.write("            responsive: true,\r\n");
      out.write("            plugins: { legend: { position: 'bottom', labels: { padding: 20, boxWidth: 15 } } }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
